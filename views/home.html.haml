- @title = "Sassy Mother Effing Text Shadow"

%header
  .lorenz{:contenteditable => ""}
    :markdown
      .
  %h1{:contenteditable => ""} Sassy Mother Effing Text Shadow
  = render :template => "/partials/menu.haml"
%h2.warning{:contenteditable => "true", "data-alt" => "Please try this at home."} Don&rsquo;t try this at home. 
#main{:role => "main"}
  
  %small.disclaimer 
    :markdown
      This CSS has been beaten to within an inch of death. It's too big, unreadable, and completely impractical.  
      Sass should not be used to such ill-conceived ends. 
  %b.nyah{:contenteditable => ""} But its fun, and looks &ldquo;cool&rdquo;. 
  
  %div.ex.ex1#wtf
    %h3{:contenteditable => ""}  WTF
    :markdown
      I wanted to find out if I could make [Sass](http://sass-lang.com/) generate a pile of shadows for me. I thought maybe I could trick it into drawing shadows in funny shapes. For the first step I just needed to just create a simple long diagonal shadow. The trick here is that I'm building a string to be used as a shadow one iteration at a time using the `@for` loop, and then outputting whole generated shadow. I'm using Compass's [text-shadow mixin](http://compass-style.org/reference/compass/css3/text-shadow/) to smooth out any browser prefixes. 
    %pre.brush:.sass
      :preserve
        @function wtf() {
          $output: '';
          $color: rgba($red, 0.5);
          $end: 25;
          @for $i from 1 through $end {
             $output: $output + '#{$color} #{$i}px #{$i}px 2px';
             @if $i < $end {
               $output: $output + ', ';
             }
          }
          @return unquote($output);
        }

        .ex1 h3 {
          @include text-shadow(wtf());
        }
  %div.ex.ex2#omg
    %h3{:contenteditable => ""}  OMG
    :markdown
      Next I pulled out Compass' [trig](http://compass-style.org/reference/compass/helpers/trig/) functions to make circle shadows. I barely understand the math, but I like playing with it.
    %pre.brush:.sass
      :preserve
        @function omg() {
          $output: '';
          $end: 25;
          $radius: 50;
          @for $i from 1 through $end {
            $color: rgba($red, ($i / $end));
            $position: 360 / $end * $i;
            $cos: cos($position * (pi() / 180));
            $x-position: $radius * $cos;
            $sin: sin($position * (pi() / 180));
            $y-position: $radius * $sin;
             $output: $output + '\#{$color} \#{$x-position}px \#{$y-position}px 2px';
             @if $i < $end {
               $output: $output + ', ';
             }
          }
          @return unquote($output);
        }

        .ex2 h3 {
          @include text-shadow(omg());
        }
  %div.ex.ex3#wtfomg
    %h3{:contenteditable => ""}  OMG-WTF
    :markdown
      Why stop there? If I mess around with the variables I can make interesting patterns. 
    %pre.brush:.sass
      :preserve
        @function omgwtf() {
          $output: '';
          $end: 100;
          $radius: 40;
          @for $i from 1 through $end {
            $color: rgba($red, ($i / $end));
            $position: 360 / $end * $i;
            $cos: cos($position * (pi() / 180));
            $x-position: $radius * $cos;
            $sin: sin($position * (pi() / 15));
            $y-position: $radius * $sin;
             $output: $output + '\#{$color} \#{$x-position}px \#{$y-position}px 2px';
             @if $i < $end {
               $output: $output + ', ';
             }
          }
          @return unquote($output);
        }

        .ex3 h3 {
          @include text-shadow(omgwtf());
        }
  %div.ex.ex4#omgwtfbbq
    %h3{:contenteditable => ""}  OMG WTF BBQ
    :markdown
      Hey, why not try to do something less circular, and maybe play with the color?
    %pre.brush:.sass
      :preserve
        @function omgwtfbbq() {
          $output: '';
          $end: 100;
          $radius: 80;
          @for $i from 1 through $end {
            $color: rgba($red, ($i / $end));
            $color: adjust-hue($color, $i / 1.618);
            $position: 90 / $end * $i;
            $cos: cos($position * (pi() / 60));
            $x-position: $radius * $cos;
            $sin: sin($position * (pi() / -45));
            $y-position: $radius * $sin;
            $output: $output + '\#{$color} \#{$x-position}px \#{$y-position}px 2px';
             @if $i < $end {
               $output: $output + ', ';
             }
          }
          @return unquote($output);
        }

        .ex4 h3 {
          @include text-shadow(omgwtfbbq());
        }
  %div.ex.ex5#mftsii
    %h3{:contenteditable => ""} 
      MOTHER EFFING TEXT SHADOW II
    :markdown
      Now it's your turn. You know Sass (or would like to) and you want to terrible, dirty things with it. This [mixin](tktktk) is for you. 
    %pre.brush:.sass
      :preserve
        @function mothereffingtextshadow($color, $iterations, $rad, $deg, $cos-i, $sin-i, $color-multiplier) {
          $output: '';
          $end: $iterations;
          $radius: $rad;
          @for $i from 1 through $end {
            $color: rgba($color, ($i / $end));
            $color: adjust-hue($color, $i * $color-multiplier);
            $position: $deg / $end * $i;
            $cos: cos($position * (pi() / $cos-i));
            $x-position: $radius * $cos;
            $sin: sin($position * (pi() / $sin-i));
            $y-position: $radius * $sin;
            $spread: $i / ($iterations / 10);
            $output: $output + '\#{$color} \#{$x-position}px \#{$y-position}px #{$spread}px';
             @if $i < $end {
               $output: $output + ', ';
             }
          }
          @return unquote($output);
        }

        .ex5 h3 {
          @include text-shadow(mothereffingtextshadow($red, 100, 80, 120, 90, -45, 0.09));
        }
  %div.ex.ex6#lmao
    %h3{:contenteditable => ""} 
      *
    :markdown
      There shouldn't be more. I'd like to tell you that a masked gunman made me make a [Lorenz Attractor](http://en.wikipedia.org/wiki/Lorenz_Attractor) in Sass. But the truth is that it was just bad judgement. For the love of all that is good don't use this anywhere. The CSS is just out of control. View source at your peril.
    %pre.brush:.sass
      :preserve
        @function lmao($orig-color, $iterations, $sx, $sy, $sz) {
          $output: '';
          $end: $iterations;

          $x0: $sx / 10;
          $y0: $sy;
          $z0: $sz;
          $h: 0.01;
          $a: 10.0;
          $b: 28.0;
          $c: 8.0 / 3.0;

          @for $i from 0 through $end {
            $x1: $x0 + $h * $a * ($y0 - $x0);
            $y1: $y0 + $h * ($x0 * ($b - $z0) - $y0);
            $z1: $z0 + $h * ($x0 * $y0 - $c * $z0);

            $xval: $x1 * -50;
            $yval: $y1 * -20;
            $spread: $z1 * .1;

            $color: rgba($orig-color, ($i / $end));
            $color: adjust-hue($color, $z1);

            $output: $output + '#{$color} #{$xval}px #{$yval}px #{$spread}px';
             @if $i < $end {
               $output: $output + ', ';
             }

             $x0: $x1;
             $y0: $y1;
             $z0: $z1;

          }

          @return unquote($output);
        }

        .ex6 h3 {
          @include text-shadow(lmao($red, 5000, 6, 4, 6));
        }
%footer#credits
  .tcd
    %small
      Brought to you by
    %a{:href => "http://thecodingdesigner.com", :title => "The Coding Designer's Survival Kit"}
      %h1#site-name
        The Coding Designerâ€™s
      %h2#site-subtitle
        Survival Kit
  %nav.social
    %ul
      %li.twitter
        %label
          Twitter:
        %a{:href => "http://twitter.com/canarymason"} @canarymason
      %li.github
        %a{:href => "https://github.com/canarymason/sassytextshadow"} Fork on Github
      %li.gem
        %a{:href => "https://rubygems.org/gems/sassy-text-shadow"} Install the gem
      %li.hattip
        %label
          Hat Tip:
        %a{:href => "http://mothereffingtextshadow.com/"} The Paul Irish Original